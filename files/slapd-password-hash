#!/bin/bash -e

# This script hashes a password with slappasswd.
# If an old password is found, the salt of this password is taken.
# This ensures that tasks are not changed when the password did not change but the salt did.

set -o nounset
umask 177

# Parameters
socket="ldapi://${1}"
binddn="${2}"
# bindpw via env variable
dn="${3}"
attribute="${4}"
# newpw via env variable

# See get the current password
set +e
set -x
search="$(builtin echo -n "${bindpw}" | \
	ldapsearch -o ldif-wrap=no -H "${socket}" -D "${binddn}" -y /dev/stdin -b "${dn}" -s base "${attribute}" | \
	grep "^${attribute}:")"
set -e

# Decide what to do
if [ -z "$(echo "${search}" | xargs)" ]; then
	# Hash with random salt
	hashed="$(builtin echo -n "${newpw}" | slappasswd -c '$6$%s.16' -n -T /dev/stdin)"
else
	# Hash with specified salt
	trimmed="$(echo "${search}" | xargs | cut -d' ' -f2)"
	prefix="$(echo "${trimmed}" | cut -d'$' -f1)"
	oldalgo="$(echo "${trimmed}" | cut -d'$' -f2)"
	oldsalt="$(echo "${trimmed}" | cut -d'$' -f3)"
	export newpw
	hashed="${prefix}$(perl -e "print crypt(\$ENV{'newpw'}, '\$${oldalgo}\$${oldsalt}')")"
	unset newpw
fi

echo -n "${hashed}"
